Neste trabalho você deve criar um jogador de jogo da velha em um tabuleiro com NxN casas

Você receberá um .jar que simula um jogo da velha com NxN casas (o jogo escolhe o número de casas)

Os arquivos fontes dados aqui fazem parte do .jar, não precisa adicionar, só usar do .jar
Eles estão expostos para você poder olhar as funções.

O .jar inclui uma fábrica de oponentes
* você pode criar três tipos de jogadores já programados para testar seu jogador:
* * PlayerR: joga sempre aleatório
* * Player1: avalia o próximo tabuleiro (avaliação heurística) (AINDA NÃO IMPLEMENTADO)

Você deve criar dois jogadores: 
* um jogador que saiba jogar o jogo
* um jogador que ganhe na maiorida das vezes do PlayerR
O seu jogador deve ser uma subclasse de Player (que extende a interface Playable) (classes em anexo)

Sobre a fábrica de jogadores:
Para criar um oponente você deve usar o "Player PlayerFactory.getPlayer(char tipo, Tabuleiro tabuleiro);"
* tipo é um char:
* * 'R' para jogador que joga aleatório
* * 'E' para jogador que joga aleatório e errado
* * '1' para jogador que avalia o próximo passo (AINDA NÃO IMPLEMENTADO)

Para criar um jogador você deve extender a classe Player
Seu jogador deve implementar as seguintes funções
* public Jogada joga(Tabuleiro tabuleiro);
* * recebe uma foto do tabuleiro e retorna uma jogada "public Jogada joga(TabuleiroFoto aTabuleiroFoto);"
* pode ter um constructor "public Player(int aN, TabuleiroFoto aTabuleiroFoto)"
* tem uma função getSide que retorna o lado que o jogador está jogando 'X' ou 'O'
* tem uma função setSide(char) que define o lado que o jogador está jogando (para testes)

Uma Jogada é uma classe que tem dois atributos públicos x e y, representando as coordenadas da jogada:
* x representa a linha
* y a coluna
* você pode criar uma nova jogada com o constructor "public Jogada(int aX, int aY)"

Uma foto do tabuleiro é um objeto da classe TabuleiroFoto
* tem os valores 
* * public int n para representar o tamanho do tabuleiro
* * public char[][] t para representar a imagem do tabuleiro com os símbolos
* * * '_' para espaço vazio
* * * 'O' para círculo
* * * 'X' para o X

O que ainda falta eu implementar:
- [feature] jogador que faz uma heurística de avaliação



Um exemplo de como usar o .jar:

import model.Jogo;
import model.Player;
import model.TabuleiroFoto;
import playerFactory.PlayerFactory;

public class AlunoTest {
  public static void main(String[] args) {
    int n=5;
    TabuleiroFoto tabuleiroFoto = new TabuleiroFoto(n);
    Player p1 = PlayerFactory.getPlayer('R', n, tabuleiroFoto);
    Player p2 = PlayerFactory.getPlayer('R', n, tabuleiroFoto);
    Jogo jogo = new Jogo(tabuleiroFoto, p1, p2);
  }
}

/*************/
/* AVALIAÇÃO */
/*************/

Seu jogador será avaliado em um campeonato, ele jogará contra o jogador aleatório:
* com tamanhos de tabuleiro variando entre 4 e 10, 
* começando em primeiro (com 'O') e em segundo (com 'X'), 
* 100 vezes em cada situação
A nota do seu jogador será proporcional à média de vezes que seu jogador GANHAR do jogador aleatório
Sendo nota máxima (6pt) quando ganhar 80% das vezes e nota mínima (3pt) quando ganhar 0% das vezes

Um exemplo de como usar o .jar para um campeonato:

import Model.JogadorProfessor;
import model.Campeonato;
import model.Player;
import model.TabuleiroFoto;
import playerFactory.PlayerFactory;

public class AlunoTest {
  public static void main(String[] args) {
    
    TabuleiroFoto tabuleiroFoto = new TabuleiroFoto(1);
    Player p1 = new JogadorProfessor(1, tabuleiroFoto);
    Player p2 = PlayerFactory.getPlayer('R', 1, tabuleiroFoto);
    Campeonato.play(p1, p2);
  }
}


